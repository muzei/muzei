/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'signing'

Properties versionProps = new Properties()
versionProps.load(new FileInputStream(file('../version.properties')))

group = 'com.google.android.apps.muzei'
version = versionProps['apiName']


Properties props = new Properties()
props.load(new FileInputStream(file('../local.properties')))

allprojects { ext."signing.keyId" = props["signing.keyId"] }
allprojects { ext."signing.password" = props["signing.password"] }
allprojects { ext."signing.secretKeyRingFile" = props["signing.secretKeyRingFile"] }

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    api "androidx.core:core:1.1.0"
    implementation "androidx.exifinterface:exifinterface:1.3.2"
}
android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion rootProject.ext.targetSdkVersion

        def apiVersion = versionProps['apiCode'].toInteger()
        manifestPlaceholders = [api_version: apiVersion]
        buildConfigField "int", "API_VERSION", "${apiVersion}"

        buildConfigField "String", "CHOOSE_PROVIDER_URI_PREFIX", "\"muzei://sources/\""
    }

    buildTypes {
        publicBeta
        publicDebug
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        freeCompilerArgs += "-Xexplicit-api=strict"
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"

    configuration {
        externalDocumentationLink {
            url = new URL("https://developer.android.com/reference/")
            packageListUrl = new URL("https://developer.android.com/reference/androidx/package-list")
        }

        perPackageOption {
            prefix = "com.google.android.apps.muzei.api.internal"
            suppress = true
        }

        // Add module and package level documentation
        includes = ['module.md', 'package.md']
    }

    doLast {
        copy {
            from "javadoc-scripts"
            into new File(outputDirectory)
            include "style.css"
        }
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"

    configuration {
        externalDocumentationLink {
            url = new URL("https://developer.android.com/reference/")
            packageListUrl = new URL("https://developer.android.com/reference/androidx/package-list")
        }

        perPackageOption {
            prefix = "com.google.android.apps.muzei.api.internal"
            suppress = true
        }
        perPackageOption {
            prefix = "com.google.android.apps.muzei.api.BuildConfig"
            suppress = true
        }

        // Add module and package level documentation
        includes = ['module.md', 'package.md']
    }
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    setArchiveClassifier('javadoc')
    from dokkaJavadoc.outputDirectory
}

task sourcesJar(type: Jar) {
    setArchiveClassifier('sources')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// http://jedicoder.blogspot.com/2011/11/automated-gradle-project-deployment-to.html
// TODO: switch to http://www.gradle.org/docs/current/userguide/publishing_maven.html

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: props["sonatypeUsername"], password: props["sonatypePassword"])
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: props["sonatypeUsername"], password: props["sonatypePassword"])
            }

            pom.project {
               name 'Muzei API'
               packaging 'aar'
               description 'The Muzei API allows you to extend Muzei with custom sources'
               url 'http://api.muzei.co'

               scm {
                   url 'https://github.com/romannurik/muzei.git'
                   connection 'scm:git:https://github.com/romannurik/muzei'
                   developerConnection 'scm:git:https://github.com/romannurik/muzei'
               }

               licenses {
                   license {
                       name 'The Apache Software License, Version 2.0'
                       url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                       distribution 'repo'
                   }
               }

               developers {
                   developer {
                       id 'romannurik'
                       name 'Roman Nurik'
                   }
               }
           }
        }
    }
}
