/*
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.devtools.ksp'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

android {
    namespace 'net.nurik.roman.muzei.legacy'
    resourcePrefix 'legacy_'

    compileSdk libs.versions.compileSdk.get().toInteger()

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        minSdkVersion 21
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 25

        versionName '1.1.0'
        versionCode 2

        multiDexEnabled true

        def legacyAuthorityValue = "com.google.android.apps.muzei.legacy"
        manifestPlaceholders = [legacyAuthority: legacyAuthorityValue]
        buildConfigField "String", "LEGACY_AUTHORITY", "\"${legacyAuthorityValue}\""

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }

    signingConfigs {
        release {
            Properties localProps = new Properties()
            localProps.load(new FileInputStream(file('../local.properties')))
            Properties keyProps = new Properties()
            if (localProps['keystore.props.file'] != null) {
                keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
            }
            storeFile keyProps["store"] != null ? file(keyProps["store"]) : null
            keyAlias keyProps["alias"] ?: ""
            storePassword keyProps["storePass"] ?: ""
            keyPassword keyProps["pass"] ?: ""
        }
    }

    buildTypes {
        debug {
            versionNameSuffix " Debug"
            FirebasePerformance {
                instrumentationEnabled false
            }
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard-project.txt')
            signingConfig signingConfigs.release
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }
}

dependencies {
    implementation libs.coroutines.core
    implementation libs.coroutines.android
    implementation libs.multidex
    implementation libs.appCompat
    implementation libs.core
    implementation libs.fragment
    implementation libs.lifecycle.livedata
    implementation libs.lifecycle.common
    implementation libs.lifecycle.runtime
    implementation libs.room.ktx
    ksp libs.room.compiler
    implementation libs.material
    implementation libs.firebase.analytics
    api libs.firebase.crashlytics
    implementation libs.firebase.perf
    implementation libs.okhttp.core
    implementation project(':muzei-api')
    implementation project(':extensions')
    implementation project(':legacy-common')
}

apply plugin: 'com.google.gms.google-services'